using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using LanguageExt;
using static LanguageExt.Prelude;
using LanguageExt.UnsafeValueAccess;

namespace SpellTomeRemoverNG
{
    public class Program
    {
        static Lazy<Settings> Settings = null!;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out Settings
                )
                .SetTypicalOpen(GameRelease.SkyrimSE, "SpellTomeRemoverNG.esp")
                .Run(args);
        }

        private static void RemovePlacedSpellTomes(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            int spellTomesRemoved = 0;

            foreach (var placedObject in state.LoadOrder.PriorityOrder.PlacedObject().WinningContextOverrides(state.LinkCache))
            {
                // Disabled?
                if (placedObject.Record.MajorRecordFlagsRaw == 0x0000_0800) continue;
                // A book?
                if (!placedObject.Record.Base.TryResolve<IBookGetter>(state.LinkCache, out var placedBook)) continue;
                // A spell tome?
                if (placedBook.Teaches is not IBookSpellGetter) continue;

                // Is this part of a blacklisted mod?
                if (Settings.Value.PluginBlackList.Contains(placedBook.FormKey.ModKey.FileName)) continue;

                // Remove the placed spell tome.
                IPlacedObject modifiedPlacedBook = placedObject.GetOrAddAsOverride(state.PatchMod);
                modifiedPlacedBook.MajorRecordFlagsRaw |= 0x0000_0800;
                ++spellTomesRemoved;
            }

            Console.WriteLine($"Removed {spellTomesRemoved} placed spell tomes.");
        }

        private static void RemoveSpellTomesFromContainers(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            int containersModified = 0;
            int spellTomesRemoved = 0;

            foreach (var container in state.LoadOrder.PriorityOrder.Container().WinningOverrides())
            {
                Option<IContainer> modifiedContainer = None;
                List<int> itemIndiciesToRemove = [];

                // No items, then skip.
                if (container.Items is null) continue;

                // Skip containers from blacklisted mods.
                if (Settings.Value.PluginBlackList.Contains(container.FormKey.ModKey.FileName))
                {
                    continue;
                }

                for (int i = 0; i < container.Items.Count; ++i)
                {
                    if (!container.Items[i].Item.Item.TryResolve<IBookGetter>(state.LinkCache, out var book)) continue;
                    // A spell tome?
                    if (book.Teaches is not IBookSpellGetter) continue;
                    // Spell tome. Modify the container if not already.

                    if (Settings.Value.PluginBlackList.Contains(book.FormKey.ModKey.FileName))
                    {
                        continue;
                    }

                    if (modifiedContainer.IsNone)
                    {
                        modifiedContainer = state.PatchMod.Containers.GetOrAddAsOverride(container);
                        ++containersModified;
                    }
                    itemIndiciesToRemove.Add(i);
                    ++spellTomesRemoved;
                }

                if (modifiedContainer.IsNone) continue;

                // Remove the spell tomes from the container.
                foreach (var index in itemIndiciesToRemove.OrderByDescending(x => x))
                {
                    modifiedContainer.ValueUnsafe().Items?.RemoveAt(index);
                }
            }

            Console.WriteLine($"Removed {spellTomesRemoved} spell tomes from {containersModified} containers.");
        }

        private static void RemoveSpellTomesFromLeveledLists(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            int leveledListsModified = 0;
            int spellTomesRemoved = 0;

            foreach (var leveledItemList in state.LoadOrder.PriorityOrder.LeveledItem().WinningOverrides())
            {
                Option<ILeveledItem> modifiedLeveledItem = None;
                List<int> itemIndiciesToRemove = [];

                if (Settings.Value.PluginBlackList.Contains(leveledItemList.FormKey.ModKey.FileName))
                {
                    continue;
                }

                if (leveledItemList.Entries is null) continue;

                for (int i = 0; i < leveledItemList.Entries.Count; ++i)
                {
                    var entry = leveledItemList.Entries[i];

                    if (entry.Data is null) continue;
                    if (!state.LinkCache.TryResolve<IBookGetter>(entry.Data.Reference.FormKey, out var book)) continue;
                    // A spell tome?
                    if (book.Teaches is not IBookSpellGetter) continue;
                    
                    if (Settings.Value.PluginBlackList.Contains(book.FormKey.ModKey.FileName))
                    {
                        continue;
                    }

                    // Spell tome. Modify the leveled item if not already.
                    if (modifiedLeveledItem.IsNone)
                    {
                        modifiedLeveledItem = state.PatchMod.LeveledItems.GetOrAddAsOverride(leveledItemList);
                        ++leveledListsModified;
                    }

                    itemIndiciesToRemove.Add(i);
                    ++spellTomesRemoved;
                }

                if (modifiedLeveledItem.IsNone) continue;

                // Remove the spell tomes from the leveled item.
                foreach (var index in itemIndiciesToRemove.OrderByDescending(x => x))
                {
                    modifiedLeveledItem.ValueUnsafe().Entries?.RemoveAt(index);
                }
            }

            Console.WriteLine($"Removed {spellTomesRemoved} spell tomes from {leveledListsModified} leveled lists.");
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            RemovePlacedSpellTomes(state);
            RemoveSpellTomesFromContainers(state);
            RemoveSpellTomesFromLeveledLists(state);
        }
    }
}
